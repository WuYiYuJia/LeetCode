Alice 在给 Bob 用手机打字。数字到字母的 对应 如下图所示。

为了 打出 一个字母，Alice 需要 按 对应字母 i 次，i 是该字母在这个按键上所处的位置。

比方说，为了按出字母 's' ，Alice 需要按 '7' 四次。类似的， Alice 需要按 '5' 两次得到字母  'k' 。
注意，数字 '0' 和 '1' 不映射到任何字母，所以 Alice 不 使用它们。
但是，由于传输的错误，Bob 没有收到 Alice 打字的字母信息，反而收到了 按键的字符串信息 。

比方说，Alice 发出的信息为 "bob" ，Bob 将收到字符串 "2266622" 。
给你一个字符串 pressedKeys ，表示 Bob 收到的字符串，请你返回 Alice 总共可能发出多少种文字信息 。

由于答案可能很大，将它对 109 + 7 取余 后返回。

 

//遍历字符串获取最长相同字子串
//对于非'7'或'9'
//f[i]= f[i-1]+f[i-2]+f[i-3]
//对于'7'或'9'
//f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4]
class Solution {
public:
    const int MOD = 1'000'000'007;
    long long dfs(int n, int index = 3) {
        long long res = 0; // 重置 res
        if (n <= 1) return 1;
        for (int i = index; i > 0; i--) {
            if (n >= i) {
                if(index==3)
                    res += dfs(n - i);
                else{
                    res+=dfs(n-i,4);
                }
                res%=MOD;
            }
        }
        return res%MOD;
    }
    int countTexts(string pressedKeys) {
        long long ans = 1;
        int cnt=0;
        if (pressedKeys.length() <= 1) return 1;
        for (int i = 0; i < pressedKeys.length(); i++) {
            cnt++;
            if (pressedKeys[i] != pressedKeys[i + 1]||i==pressedKeys.length()-1) {
                if (pressedKeys[i] == '7' || pressedKeys[i] == '9') {
                    ans *= dfs(cnt, 4);
                } else {
                    ans *= dfs(cnt);
                }
                cnt=0;
            }
            
        }
        return ans;
    }
};
