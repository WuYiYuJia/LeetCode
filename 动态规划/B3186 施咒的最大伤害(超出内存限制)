一个魔法师有许多不同的咒语。

给你一个数组 power ，其中每个元素表示一个咒语的伤害值，可能会有多个咒语有相同的伤害值。

已知魔法师使用伤害值为 power[i] 的咒语时，他们就 不能 使用伤害为 power[i] - 2 ，power[i] - 1 ，power[i] + 1 或者 power[i] + 2 的咒语。

每个咒语最多只能被使用 一次 。

请你返回这个魔法师可以达到的伤害值之和的 最大值 。

 

示例 1：

输入：power = [1,1,3,4]

输出：6

解释：

可以使用咒语 0，1，3，伤害值分别为 1，1，4，总伤害值为 6 。

示例 2：

输入：power = [7,1,6,6]

输出：13

解释：

可以使用咒语 1，2，3，伤害值分别为 1，6，6，总伤害值为 13 。

 

class Solution {
public:
    long long maximumTotalDamage(vector<int>& power) {
        if (power.empty()) {
            return 0;
        }
        int maxPower = *max_element(power.begin(), power.end());
        std::sort(power.begin(), power.end()); 
        vector<int> all(maxPower+1,0);
        for(int i=0;i<power.size();i++){
            all[power[i]]++;
        }
        if(all.size()==1)return 0;
        if(all.size()==2)return all[1];
        if(all.size()==3)return max(all[1],all[2]*2);
        long long f0=0;
        long long f1=all[1];
        long long f2=max(all[1],all[2]*2);
        long long f;
        for(int i=3;i<all.size();i++){
            f=max(f0+all[i]*i,max(f1,f2));
            f0=f1;
            f1=f2;
            f2=f;
        }
        return f;
    }
};
