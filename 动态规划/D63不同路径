一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。

现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？

网格中的障碍物和空位置分别用 1 和 0 来表示。

 

class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m=len(obstacleGrid)
        n=len(obstacleGrid[0])
        @cache
        def dfs(m:int,n:int)->int:
            if obstacleGrid[m][n] == 1:
                return 0
            if m<0 or n<0:
                return 0
            if m==0 and n==0:
                return 1
            return dfs(m-1,n)+dfs(m,n-1)
        return dfs(m-1,n-1)
